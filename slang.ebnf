@@grammar::SLANG
@@keyword :: let in if else then function namespace import true false type this
@@parseinfo :: True
@@comments :: /\(\*((?:.|\n)*?)\*\)/
@@eol_comments :: /\/\/.*?$/

start = @:block_region ~ $ ;

block = '{' ~ @:block_region '}' ;

block_region
    = statements:{ statement } expression:(expression | ~ forgot_expression) ;

statement
    = @:bang (';' | ~ forgot_semicolon)
    | @:import_file (';' | ~ forgot_semicolon)
    | @:assignment (';' | ~ forgot_semicolon)
    ;

forgot_semicolon = x:&(statement | expression | $) ;
forgot_expression = x:&('}' | $) ;

bang = '!' ~ expression:expression ;

assignment = 'let' ~ name:identifier '=' expression:expression ;
import_file = 'import' ~ path:string ;

expression
    = block
    | import_file
    | function
    | if_then_else
    | relational_expression
    ;

function
    = 'function' ~ '(' { parameters+:parameter { ',' parameters+:parameter } } ')' body:expression
    ;

parameter = name:identifier ;

namespace = 'namespace' ~ '{' { definitions+:definition } '}' ;

definition = name:identifier '=' ~ value:expression ';' ;

relational_expression
    = relational_binary_operation
    | additive_expression
    ;

relational_binary_operation
    = lhs:relational_expression  op:'==' ~ rhs:additive_expression
    | lhs:relational_expression  op:'<=' ~ rhs:additive_expression
    | lhs:relational_expression  op:'>=' ~ rhs:additive_expression
    | lhs:relational_expression  op:'<'  ~ rhs:additive_expression
    | lhs:relational_expression  op:'>'  ~ rhs:additive_expression
    ;

additive_expression
    = additive_binary_operation
    | multiplicative_expression
    ;

additive_binary_operation
    = lhs:additive_expression op:'+' ~ rhs:multiplicative_expression
    | lhs:additive_expression op:'-' ~ rhs:multiplicative_expression
    ;

multiplicative_binary_operation
    = lhs:multiplicative_expression op:'/' ~ rhs:unary_expression
    | lhs:multiplicative_expression op:'*' ~ rhs:unary_expression
    | lhs:multiplicative_expression op:'%' ~ rhs:unary_expression
    | lhs:multiplicative_expression op:'^' ~ rhs:unary_expression
    ;

multiplicative_expression
    = multiplicative_binary_operation
    | unary_expression
    ;

unary_expression
    = unary_operation
    | postfix_expression
    ;

unary_operation
    = op:'+' ~ inner:unary_expression
    | op:'-' ~ inner:unary_expression
    ;

postfix_expression
    = chain
    | lookup
    | index
    | function_call
    | primary_expression
    ;

primary_expression
    = variable
    | literal_expression
    | '(' @:expression ')'
    ;

literal_expression
    = bool
    | number
    | string
    | array
    | namespace
    ;

chain = chain_with_call | chain_without_call ;

chain_with_call
    = first:postfix_expression '.' function:variable '(' ~ { arguments:expression_list } ')' ;

chain_without_call
    = first:postfix_expression '.' ~ function:variable ;

lookup
    = lhs:postfix_expression '::' ~ rhs:variable ;

variable
    = name:('this' | identifier) ;

function_call
    = function:postfix_expression '(' ~ arguments:expression_list ')' ;

expression_list = { @+:expression { ',' @+:expression } } ;

if_then_else
    = 'if' ~ test:expression 'then' true:expression 'else' false:expression ;

index
    = lhs:postfix_expression '[' rhs:expression ']' ;

array = '[' value:expression_list ']'
      ;

@name
identifier
    = /(?!\d)\w+/
    ;

bool
    = value:'true'
    | value:'false'
    ;

number = float | integer ;

dec
    = value:/[0-9]+/
    ;

hex
    = '0x'value:/[0-9a-fA-F]+/
    ;

integer = hex | dec ;
float = value:(/[0-9]+\.[0-9]*/ | /\.[0-9]+/);
string = '"' value:{ STRING_ESCAPE_SEQ | /[^"]+/ }* '"' ;
STRING_ESCAPE_SEQ = '\\' /\w|\S/ ;
